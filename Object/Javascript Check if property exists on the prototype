We can check if the property exists on the prototype by combining a call to hasOwnProperty() with the in operator like this:

Copy
function hasPrototypeProperty(object, name){
  return !object.hasOwnProperty(name) && (name in object);
}
Because the in operator always returns true as long as the property is accessible by the object, and hasOwnProperty() returns true only if the property exists on the instance, a prototype property can be determined if the in operator returns true but hasOwnProperty() returns false.

Consider the following example:

Copy
function Person() {}

Person.prototype.name = "CSS";
Person.prototype.age = 19;
Person.prototype.job = "Style";
Person.prototype.sayName = function() {
  console.log(this.name);
 };

let person = new Person();
console.log(hasPrototypeProperty(person, "name"));  // true

person.name = "HTML";
console.log(hasPrototypeProperty(person, "name"));  // false
In this code, the name property first exists on the prototype, so hasPrototypeProperty() returns true.

Once the name property is overwritten, it exists on the instance, so hasPrototypeProperty() returns false.

Even though the name property still exists on the prototype, it is no longer used because the instance property now exists.
