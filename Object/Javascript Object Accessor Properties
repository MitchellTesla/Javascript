Accessor properties do not contain a data value.

Instead, they contain a combination of a getter function and a setter function.

When an accessor property is read from, the getter function is called, and it's the function's responsibility to return a valid value; when an accessor property is written to, a function is called with the new value, and that function must decide how to react to the data.

Accessor properties have four attributes:

Property
Description
[[Configurable]]

Indicates if the property may be redefined by removing the property via delete, changing the property's attributes, or changing the property into a data property.
By default, this is true for all properties defined directly on an object.
[[Enumerable]]

Indicates if the property will be returned in a for-in loop.
By default, this is true for all properties defined directly on an object.
[[Get]]

The function to call when the property is read from.
The default value is undefined.
[[Set]]

The function to call when the property is written to.
The default value is undefined.
It is not possible to define an accessor property explicitly; you must use Object.defineProperty().

Here's a simple example:

Copy
// Define object with pseudo-private member 'year_' and 
// public member 'edition'
let book = {
 year_: 2017,
 edition: 1
};


Object.defineProperty(book, "year", {
  get() {
    return this.year_;
  },
  set(newValue) {
    if (newValue > 2017) {
      this.year_ = newValue;
      this.edition += newValue - 2017;
    }
  }
 });
book.year = 2018;
console.log(book.edition);  // 2
In this code, an object book is created with two default properties: year_ and edition.

The underscore on year_ indicates that a property is not intended to be accessed from outside of the object's methods.

The year property is defined to be an accessor property where the getter function simply returns the value of year_ and the setter does some calculation to determine the correct edition.

So changing the year property to 2018 results in both year_ and edition changing to 2.

This is a typical use case for accessor properties, when setting a property value results in some other changes to occur.

It's not necessary to assign both a getter and a setter.

Assigning just a getter means that the property cannot be written to and attempts to do so will be ignored.

In strict mode, trying to write to a property with only a getter throws an error.

Likewise, a property with only a setter cannot be read and will return the value undefined in non strict mode, while doing so throws an error in strict mode.

There is no way to modify [[Configurable]] or [[Enumerable]] in browsers that don't support Object.defineProperty().
