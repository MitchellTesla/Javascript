The only difference between constructor functions and other functions is the way in which they are called.

Constructors are just functions; there's no special syntax to define a constructor.

Any function that is called with the new operator acts as a constructor, whereas any function called without it acts as a normal function.

Suppose we have:

Copy
function Person(name, age, job){
  this.name = name;
  this.age = age;
  this.job = job;
  this.sayName = function() {
    console.log(this.name);
  };
}
For instance, the Person() function may be called in any of the following ways:

As a constructor

Copy
let person = new Person("CSS", 29, "Style");
person.sayName();   // "CSS"
This example shows the typical use of a constructor-to create a new object via the new operator.

call as a function

Copy
Person("HTML", 27, "Mark up");  // adds to window
window.sayName();   // "HTML"
This example shows what happens when the Person() function is called without the new operator: The properties and methods get added to the window object.

Remember that the this object always points to the Global object (window in web browsers) when a function is called without an explicitly set this value by being an object method or through call()/apply().

So after the function is called, the sayName() method can be called on the window object, and it will return "HTML".

Call in the scope of another object

Copy
let o = new Object();
Person.call(o, "Javascript", 25, "Logic");
o.sayName();  // "Javascript"
The Person() function can also be called within the scope of a particular object using call() (or apply()).

In this case, it's called with a this value of the object o, which then gets assigned all of the properties and the sayName() method.
