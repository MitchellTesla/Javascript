Combination inheritance combines prototype chaining and constructor stealing to get the best of each approach.

We use prototype chaining to inherit properties and methods on the prototype and to use constructor stealing to inherit instance properties.

This allows function reuse by defining methods on the prototype and allows each instance to have its own properties.

Consider the following:

Copy
function SuperType(name){
  this.name = name;
  this.colors = ["red", "blue", "green"];
}

SuperType.prototype.sayName = function() {
  console.log(this.name);
};

function SubType(name, age){
  // inherit properties
  SuperType.call(this, name);

  this.age = age;
}

// inherit methods
SubType.prototype = new SuperType();

SubType.prototype.sayAge = function() {
  console.log(this.age);
};

let instance1 = new SubType("CSS", 19);
instance1.colors.push("black");
console.log(instance1.colors);  // "red,blue,green,black"
instance1.sayName();            // "CSS";
instance1.sayAge();             // 19

let instance2 = new SubType("HTML", 27);
console.log(instance2.colors);  // "red,blue,green"
instance2.sayName();            // "HTML";
instance2.sayAge();             // 27
In this example, the SuperType constructor defines two properties, name and colors, and the Super- Type prototype has a single method called sayName().

The SubType constructor calls the SuperType constructor, passing in the name argument, and defines its own property, called age.

Additionally, the SubType prototype is assigned to be an instance of SuperType, and then a new method, called sayAge(), is defined.

With this code, we create two separate instances of SubType that have their own properties, including the colors property, but all use the same methods.

Addressing the down sides of both prototype chaining and constructor stealing, combination inheritance is the most frequently used inheritance pattern in JavaScript.

It also preserves the behavior of instanceof and isPrototypeOf() for identifying the composition of objects.

Copy
