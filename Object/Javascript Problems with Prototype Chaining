The prototype chaining for inheritance has major issue around prototypes that contain reference values.

The prototype properties containing reference values are shared with all instances.

So properties are typically defined within the constructor instead of on the prototype.

When implementing inheritance using prototypes, the prototype actually becomes an instance of another type.

What once were instance properties are now prototype properties.

Here is an example:

Copy
function SuperType() {
  this.colors = ["red", "blue", "green"];
}

function SubType() {}

// inherit from SuperType
SubType.prototype = new SuperType();

let instance1 = new SubType();
instance1.colors.push("black");
console.log(instance1.colors);  // "red,blue,green,black"

let instance2 = new SubType();
console.log(instance2.colors);  // "red,blue,green,black"
In this example, the SuperType constructor defines a property, colors, that contains an array, which is a reference value.

Each instance of SuperType has its own colors property containing its own array.

When SubType inherits from SuperType via prototype chaining, SubType.prototype becomes an instance of SuperType and so it gets its own colors property.

After that all instances of SubType share a colors property.

This is indicated as the changes made to instance1.colors are reflected on instance2.colors.

A second issue with prototype chaining is that you cannot pass arguments into the supertype constructor when the subtype instance is being created.

The prototype chaining is rarely used alone.
