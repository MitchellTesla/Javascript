Each function is created with a prototype property, which is an object containing properties and methods that should be available to instances of a particular reference type.

Using the prototype makes all of its properties and methods share the object instances.

Instead of assigning object information in the constructor, they can be assigned directly to the prototype, as in this example:

Copy
function Person() {}

Person.prototype.name = "CSS";
Person.prototype.age = 29;
Person.prototype.job = "Style";
Person.prototype.sayName = function() {
     console.log(this.name);
};

let person1 = new Person();
person1.sayName();   // "CSS"

let person2 = new Person();
person2.sayName();   // "CSS"

console.log(person1.sayName == person2.sayName);  // true
Using a function expression is also suitable:

Copy
let Person = function() {};

Person.prototype.name = "CSS";
Person.prototype.age = 29;
Person.prototype.job = "Style";
Person.prototype.sayName = function() {
   console.log(this.name);
};

let person1 = new Person();
person1.sayName();   // "CSS"

let person2 = new Person();
person2.sayName();   // "CSS"

console.log(person1.sayName == person2.sayName);  // true
Here, the properties and the sayName() method are added directly to the prototype property of Person, leaving the constructor empty.

However, it's still possible to call the constructor to create a new object and have the properties and methods present.

Unlike the constructor pattern, the properties and methods are all shared among instances, so person1 and person2 are both accessing the same set of properties and the same sayName() function.
