The DataView makes no assumptions about what data type is stored inside the buffer.

We need to specify an ElementType when reading or writing, and the DataView will perform the conversion to execute that read or write.

ECMAScript 6 supports eight different ElementTypes:

Elementtype
Bytes
Description
C Equivalent
Range Of Values
Int8
1
8-bit signed integer
signed char
-128 to 127
Uint8

1

8-bit
unsigned integer
unsigned char

0 to 255

Int16
2
16-bit signed integer
short
-32768 to 32767
Uint16

2

16-bit
unsigned integer
unsigned short

0 to 65535

Int32

4

32-bit signed integer

int

-2,147,483,648 to
2,147,483,647
Uint32

4

32-bit
unsigned integer
unsigned int

0 to 4,294,967,295

Float32

4

32-bit IEEE-754
floating point
float

-3.4E+38 to +3.4E+38

Float64

8

64-bit IEEE-754
floating point
double

-1.7E+308
to +1.7E+308
The DataView exposes get and set methods for each of these types, which use a byteOffset to address into the buffer for reading and writing values.

Types can be used interchangeably, as demonstrated here:

Copy
// Allocate two bytes of memory and declare a DataView
const buf = new ArrayBuffer(2);
const view = new DataView(buf);

// the entire buffer is indeed all zeroes
// Check the first and second byte
console.log(view.getInt8(0));   // 0
console.log(view.getInt8(1));   // 0
// Check the entire buffer
console.log(view.getInt16(0));  // 0

// Set the entire buffer to ones
// 255 in binary is 11111111 (2^8 - 1)
view.setUint8(0, 255);

// DataView will automatically cast values 
// to the designated ElementType
// 255 in hex is 0xFF
view.setUint8(1, 0xFF);

// The buffer is now all ones, which when read as a
// two's complement signed integer should be -1
console.log(view.getInt16(0));  // -1
