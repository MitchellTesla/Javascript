The Array constructor also has two additional static methods introduced in ES6 to create arrays: from() and of().

from() is used for converting array-like constructs into an array instance, whereas of() is used to convert a collection of arguments into an array instance.

The first argument to Array.from() is an "array Like" object, which is anything that is iterable or has a property length and indexed elements.

This type can be used in an abundance of different ways:

Strings will be broken up into an array of single characters

Copy
console.log(Array.from("Java")); // ["J", "a", "v", "a"]
Sets and Maps can be converted into an new array instance using from()

Copy
const m = new Map().set(1, 2)
    .set(3, 4);
const s = new Set().add(1)
    .add(2)
    .add(3)
    .add(4);

console.log(Array.from(m)); // [[1, 2], [3, 4]]
console.log(Array.from(s)); // [1, 2, 3, 4]
Array.from() performs a shallow copy of an existing array

Copy
const a1 = [1, 2, 3, 4];
const a2 = Array.from(a1);

console.log(a1); // [1, 2, 3, 4]
console.log(a1 === a2); // false
Any iterable object can be used

Copy
const iter = {
    *[Symbol.iterator]() {
        yield 1;
        yield 2;
        yield 3;
        yield 4;

    }
};
console.log(Array.from(iter)); // [1, 2, 3, 4]
The arguments object can now easily be casted into an array:

Copy
function getArgsArray() {
    return Array.from(arguments);
}
console.log(getArgsArray(1, 2, 3, 4)); // [1, 2, 3, 4]
from() can use a custom object with required properties

Copy
const arrayLikeObject = {
    0: 1,
    1: 2,
    2: 3,
    3: 4,
    length: 4
};
console.log(Array.from(arrayLikeObject)); // [1, 2, 3, 4]
Array.from() also accepts a second optional map function argument.

This allows you to augment the new array's values without creating an intermediate array first, which is the case if the same were performed with Array.from().map().

A third optional argument specifies the value of this inside the map function.

The overridden this value is not applied inside an arrow function:

Copy
const a1 = [1, 2, 3, 4];
const a2 = Array.from(a1, x => x**2);
const a3 = Array.from(a1, function(x) {return x**this.exponent}, {exponent: 2});
console.log(a2);  // [1, 4, 9, 16]
console.log(a3);  // [1, 4, 9, 16]
Array.of() will convert the list of arguments into an array.

This is to replace the common pre-ES6 method of converting the arguments object into an array using the Array.prototype.slice.call(arguments):

Copy
console.log(Array.of(1, 2, 3, 4));  // [1, 2, 3, 4]
console.log(Array.of(undefined));   // [undefined]
