ECMAScript 6 introduced iterators and the spread operator, which are especially useful for collection reference types.

These new tools allow for easy interoperability, cloning, and modification of collection types.

Four native collection reference types define a default iterator:

Array
All typed arrays
Map
Set
All support ordered iteration and can be passed to a for...of loop:

Copy
let iterableThings = [
  Array.of(1, 2),
  typedArr = Int16Array.of(3, 4),
  new Map([[5, 6], [7, 8]]),
  new Set([9, 10])
 ];


for (const iterableThing of iterableThings) {
  for (const x of iterableThing) {
    console.log(x);
  }
}
Output:


All these types are compatible with the spread operator.

The spread operator is especially useful as it performs a shallow copy on the iterable object.

This allows you to easily clone entire objects with a succinct syntax:

Copy
let arr1 = [1, 2, 3];
let arr2 = [...arr1];

console.log(arr1);           // [1, 2, 3]
console.log(arr2);           // [1, 2, 3]
console.log(arr1 === arr2);  // false
Constructors which expect an iterable object can just be passed the iterable instance to be cloned:

Copy
let map1 = new Map([[1, 2], [3, 4]]);
let map2 = new Map(map1);

console.log(map1);  // Map {1 => 2, 3 => 4}
console.log(map2);  // Map {1 => 2, 3 => 4}
It also allows for partial array construction:

Copy
let arr1 = [1, 2, 3];
let arr2 = [0, ...arr1, 4, 5];

console.log(arr2);  // [0, 1, 2, 3, 4, 5]
The shallow copy mechanism means that only object references are copied:

Copy
let arr1 = [{}];
let arr2 = [...arr1];

arr1[0].foo = 'bar';
console.log(arr2[0]);  // { foo: 'bar' }
Each of these collection types support multiple methods of construction, such as the Array.of() and Array.from() static methods.

When combined with the spread operator, this makes for easy interoperability:

Copy
let arr1 = [1, 2, 3];

// Copy array into typed array
let typedArr1 = Int16Array.of(...arr1);
let typedArr2 = Int16Array.from(arr1);
console.log(typedArr1);  // Int16Array [1, 2, 3]
console.log(typedArr2);  // Int16Array [1, 2, 3]

// Copy array into map
let map = new Map(arr1.map((x) => [x, 'val' + x]));
console.log(map);  // Map {1 => 'val 1', 2 => 'val 2', 3 => 'val 3'}

// Copy array in to set
let set = new Set(typedArr2);
console.log(set);  // Set {1, 2, 3}

// Copy set back into array
let arr2 = [...set];
console.log(arr2);  // [1, 2, 3]
