A MutationObserver can be associated with many different target elements by calling observe() multiple times.

The target property on the MutationRecord can identify which element was subject to that particular mutation.

This behavior is demonstrated here:

Copy
let observer = new MutationObserver(
                 (mutationRecords) => console.log(mutationRecords.map((x) =>
x.target)));

// Append two children to body
let childA = document.createElement('div'),
    childB = document.createElement('span');
document.body.appendChild(childA);
document.body.appendChild(childB);

// Observe both children
observer.observe(childA, { attributes: true });
observer.observe(childB, { attributes: true });

// Perform mutation on each child
childA.setAttribute('foo', 'bar');
childB.setAttribute('foo', 'bar');
Output:


The disconnect() method will disconnect all observed nodes:

Copy
let observer = new MutationObserver(
                 (mutationRecords) => console.log(mutationRecords.map((x) =>
x.target)));

// Append two children to body
let childA = document.createElement('div'),
    childB = document.createElement('span');
document.body.appendChild(childA);
document.body.appendChild(childB);

// Observe both children
observer.observe(childA, { attributes: true });
observer.observe(childB, { attributes: true });

observer.disconnect();

// Perform mutation on each child
childA.setAttribute('foo', 'bar');
childB.setAttribute('foo', 'bar');
