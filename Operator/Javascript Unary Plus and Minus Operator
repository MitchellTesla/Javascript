The unary plus is represented by a single plus sign (+) placed before a variable and does nothing to a numeric value, as shown in this example:

Copy
let num = 25;
num = +num;
console.log(num);  // 25
When the unary plus is applied to a nonnumeric value, it performs the same conversion as the Number() casting function:

the Boolean values of false and true are converted to 0 and 1,
string values are parsed according to a set of specific rules, and
objects have their valueOf() and/or toString() method called to get a value to convert.
The following example demonstrates the behavior of the unary plus when acting on different data types:

Copy
let s1 = "01";
let s2 = "1.1";
let s3 = "z";
let b = false;
let f = 1.1;
let o = {
  valueOf() {
    return -1;
  }
};

s1 = +s1;  // value becomes numeric 1
s2 = +s2;  // value becomes numeric 1.1
s3 = +s3;  // value becomes NaN
b = +b;    // value becomes numeric 0
f = +f;    // no change, still 1.1
o = +o;    // value becomes numeric -1
unary minus
The unary minus operator's primary use is to negate a numeric value, such as converting 1 into -1.

The simple case is illustrated here:

Copy
let num = 25;
num = -num;
console.log(num);  // -25
When used on a numeric value, the unary minus simply negates the value.

When used on nonnumeric values, unary minus applies all of the same rules as unary plus and then negates the result, as shown here:

Copy
let s1 = "01";
let s2 = "1.1";
let s3 = "z";
let b = false;
let f = 1.1;
let o = {
  valueOf() {
    return -1;
  }
};

s1 = -s1;  // value becomes numeric -1
s2 = -s2;  // value becomes numeric -1.1
s3 = -s3;  // value becomes NaN
b = -b;    // value becomes numeric 0
f = -f;    // change to -1.1
o = -o;    // value becomes numeric 1
The unary plus and minus operators are used primarily for basic arithmetic but can also be useful for conversion purposes.
