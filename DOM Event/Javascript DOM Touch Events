Touch events are fired when a finger is placed on the screen, dragged across the screen, or removed from the screen.

The touch events are as follows:

Event
Meaning
touchstart
Fires when a finger touches the screen even if another finger is already touching the screen.
touchmove
Fires continuously as a finger is moved across the screen. Calling preventDefault() during this event prevents scrolling.
touchend
Fires when a finger is removed from the screen.
touchcancel
Fires when the system has stopped tracking the touch. It's unclear in the documentation as to when this can occur.
Each of these events bubbles and can be canceled.

The event object for each touch event provides properties that are common to mouse events:

Copy
bubbles, 
cancelable, 
view, 
clientX,
clientY, 
screenX, 
screenY, 
detail, 
altKey, 
shiftKey, 
ctrlKey, and 
metaKey.
In addition to these common DOM properties, touch events have the following three properties to track touches:

Property
Meaning
touches
An array of Touch objects that indicate the currently tracked touches.
targetTouches
An array of Touch objects specific to the event's target.
changedTouches
An array of Touch objects that have been changed in the last user action. Each Touch object, in turn, has the following properties:
clientX
The x-coordinate of the touch target in the viewport.
clientY
The y-coordinate of the touch target in the viewport.
identifier
A unique ID for the touch.
pageX
The x-coordinate of the touch target on the page.
pageY
The y-coordinate of the touch target on the page.
screenX
The x-coordinate of the touch target on the screen.
screenY
The y-coordinate of the touch target on the screen.
target
The DOM node target for the touch.
These properties can be used to track the touch around the screen.

For example:

Copy
function handleTouchEvent(event) {
  // only for one touch
  if (event.touches.length == 1)
    let output = document.getElementById("output");
    switch(event.type) {
      case "touchstart":
        output.innerHTML += `<br>Touch started:` +
                            `(${event.touches[0].clientX}` +
                            ` ${event.touches[0].clientY})`;
        break;
      case "touchend":
        output.innerHTML += `<br>Touch ended:` +
                            `(${event.changedTouches[0].clientX}` +
                            ` ${event.changedTouches[0].clientY})`;
        break;
      case "touchmove":
        event.preventDefault();  // prevent scrolling
        output.innerHTML += `<br>Touch moved:` +
                            `(${event.changedTouches[0].clientX}` +
                            ` ${event.changedTouches[0].clientY})`;
        break;
    }
  }
}

document.addEventListener("touchstart", handleTouchEvent);
document.addEventListener("touchend", handleTouchEvent);
document.addEventListener("touchmove", handleTouchEvent);
This code tracks a single touch around the screen.

To keep things simple, it outputs information only when there's a single active touch.

When the touchstart event occurs, it outputs the location of the touch into a <div>.

When a touchmove event fires, its default behavior is canceled to prevent scrolling and then it outputs information about the changed touch.

The touchend event outputs the last information about the touch.

There is nothing in the touches collection during the touchend event, because there is no longer an active touch; the changedTouches collection must be used instead.

These events fire on all elements of the document, so you can manipulate different parts of the page individually.

The order of events (including mouse events) when you tap on an element are:

touchstart
mouseover
mousemove (once)
mousedown
mouseup
click
touchend
