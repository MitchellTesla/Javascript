ES6 classes offer interoperability with existing built-in reference types, allowing you to extend them:

Copy
class SuperArray extends Array {
  printAll() {
    for (let i = this.length - 1; i > 0; i--) {
      console.log(this[i]);
    }
  }
}

let a = new SuperArray(1, 2, 3, 4, 5);

console.log(a instanceof Array);       // true
console.log(a instanceof SuperArray);  // true

console.log(a);  // [1, 2, 3, 4, 5]
a.printAll();
Output:


Some built-in types have methods defined in which a new object instance is returned.

By default, the type of this object instance will match the type of the original instance:

Copy
class SuperArray extends Array {}

let a1 = new SuperArray(1, 2, 3, 4, 5);
let a2 = a1.filter(x => !!(x%2))

console.log(a1);  // [1, 2, 3, 4, 5]
console.log(a2);  // [1, 3, 5]
console.log(a1 instanceof SuperArray);  // true
console.log(a2 instanceof SuperArray);  // true
If you wish to override this, you can override the Symbol.species accessor, which is used to determine the class to be used to create the returned instance:

Copy
class SuperArray extends Array {
  static get [Symbol.species]() {
    return Array;
  }
}

let a1 = new SuperArray(1, 2, 3, 4, 5);
let a2 = a1.filter(x => !!(x%2))

console.log(a1);  // [1, 2, 3, 4, 5]
console.log(a2);  // [1, 3, 5]
console.log(a1 instanceof SuperArray);  // true
console.log(a2 instanceof SuperArray);  // false
