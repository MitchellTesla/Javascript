The Javascript switch statement is another flow-control statement adopted from other languages.

The syntax for the switch statement in ECMAScript closely resembles the syntax in other C-based languages, as you can see here:

Copy
switch (expression) {
 case value1:
   statement
   break;
 case value2:
   statement
   break;
 case value3:
   statement
   break;
 case value4:
   statement
   break;
 default:
   statement
}
If the expression is equal to the value, execute the statement.

The break keyword causes code execution to jump out of the switch statement.

Without the break keyword, code execution falls through the original case into the following one.

The default keyword marks what is to be done if the expression does not evaluate to one of the cases.

In effect, it is an else statement.

For the following for statement:

Copy
if (i == 25) {
 console.log("25");
} else if (i == 35) {
 console.log("35");
} else if (i == 45) {
 console.log("45");
} else {
 console.log("Other");
}
The equivalent switch statement is as follows:

Copy
switch (i) {
  case 25:
    console.log("25");
    break;
  case 35:
    console.log("35");
    break;
  case 45:
    console.log("45");
    break;
  default:
    console.log("Other");
}
It's best to always put a break statement after each case to avoid having cases fall through into the next one.

If you need a case statement to fall through, include a comment indicating that the omission of the break statement is intentional, such as this:

Copy
switch (i) {
  case 25:
    /* falls through */
  case 35:
    console.log("25 or 35");
    break;
  case 45:
    console.log("45");
    break;
  default:
    console.log("Other");
}
ECMAScript switch statement works with all data types including strings and objects.

The case values need not be constants: they can be variables and even expressions.

Consider the following example:

Copy
switch ("hello world") {
  case "hello" + " world":
    console.log("hi.");
    break;
  case "goodbye":
    console.log("hey.");
    break;
  default:
    console.log("Unexpected message.");
}
In this example, a string value is used in a switch statement.

The first case is actually an expression that evaluates a string concatenation.

Because the result of this concatenation is equal to the switch argument, the console.log displays "hi."

We can use case expressions to check a range of value:

Copy
let num = 25;
switch (true) {
  case num < 0:
    console.log("Less than 0.");
    break;
  case num >= 0 && num <= 10:
    console.log("Between 0 and 10.");
    break;
  case num > 10 && num <= 20:
    console.log("Between 10 and 20.");
    break;
  default:
    console.log("More than 20.");
}
Here, a variable num is defined outside the switch statement.

The expression passed into the switch statement is true because each case is a conditional that will return a Boolean value.

Each case is evaluated, in order, until a match is found or until the default statement is encountered.

The switch statement compares values using the identically equal operator, so no type coercion occurs. For example, the string "10" is not equal to the number 10.
