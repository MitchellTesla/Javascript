The convenience properties are simple to use if you already know the name of the CSS properties you need to work with, and there is a convenience property available for it.

If you need to explore the CSS properties programmatically, or get/set a CSS property for which there is no corresponding convenience property, then the other members of the CSSStyleDeclaration object can be very useful.

Using the Regular Properties of the CSSStyleDeclaration Object.

Copy
let placeholder = document.getElementById("placeholder");
displayStyles();

document.getElementById("pressme").onclick = function() {
    let styleDeclr = document.styleSheets[0].cssRules[0].style;
    styleDeclr.setProperty("background-color", "lightgray");
    styleDeclr.setProperty("padding-top", "20px");
    styleDeclr.setProperty("color", "black");
    displayStyles();
}

function displayStyles() {
    if (placeholder.hasChildNodes()) {
        let childCount = placeholder.childNodes.length;
        for (let i = 0; i < childCount; i++) {
            placeholder.removeChild(placeholder.firstChild);
        }
    }

    let newElem = document.createElement("table");
    newElem.setAttribute("border", "1");

    let style = document.styleSheets[0].cssRules[0].style;

    addRow(newElem, "border", style.getPropertyValue("border"));
    addRow(newElem, "color", style.getPropertyValue("color"));
    addRow(newElem, "padding-top", style.getPropertyValue("padding-top"));
    addRow(newElem, "background-color",
           style.getPropertyValue("background-color"));

    placeholder.appendChild(newElem);
}

function addRow(elem, header, value) {
    elem.innerHTML += "<tr><td>" + header + ":</td><td>"
        +  value + "</td></tr>";
}

In this example, we read the style properties from only one source: the stylesheet.

We use the getPropertyValue method to retrieve a value for a CSS property, and the setProperty method to define new values.

Notice that you use the real CSS property names with these methods, and not the names of the convenience properties.
