The Element type is the only DOM node type that uses the attributes property.

The attributes property contains a NamedNodeMap, which is a "live" collection similar to a NodeList.

Every attribute on an element is represented by an Attr node, each of which is stored in the NamedNodeMap object.

A NamedNodeMap object has the following methods:

Method
Description
getNamedItem(name)
Returns the node whose nodeName property is equal to name.
removeNamedItem(name)
Removes the node whose nodeName property is equal to name from the list.
setNamedItem(node)
Adds the node to the list, indexing it by its nodeName property.
item(pos)
Returns the node in the numerical position pos.
Each node in the attributes property is a node whose nodeName is the attribute name and whose nodeValue is the attribute's value.

To retrieve the id attribute of an element, you can use the following code:

Copy
let id = element.attributes.getNamedItem("id").nodeValue;
Following is a shorthand notation for accessing attributes by name using bracket notation:

Copy
let id = element.attributes["id"].nodeValue;
We can use this notation to set attribute values as well, retrieving the attribute node and then setting the nodeValue to a new value, as this example shows:

Copy
element.attributes["id"].nodeValue = "someOtherId";
The removeNamedItem() method functions the same as the removeAttribute() method on the element-it removes the attribute with the given name.

The following example shows that removeNamedItem() returns the Attr node that represented the attribute:

Copy
let oldAttr = element.attributes.removeNamedItem("id");
The setNamedItem() method allows you to add a new attribute to the element by passing in an attribute node, as shown in this example:

Copy
element.attributes.setNamedItem(newAttr);
Iterate
The one area where the attributes property is useful is to iterate over the attributes on an element.

This is done most often when serializing a DOM structure into an XML or HTML string.

The following code iterates over each attribute on an element and constructs a string in the format attribute1="value1" attribute2="value2":

Copy
function outputAttributes(element) {
  let pairs = [];

  for (let i = 0, len = element.attributes.length; i < len; ++i) {
    const attribute = element.attributes[i];
    pairs.push(`${attribute.nodeName}="${attribute.nodeValue}"`);
  }

  return pairs.join(" ");
}
This function uses an array to store the name-value pairs until the end, concatenating them with a space in between.

Using the attributes.length property, the for loop iterates over each attribute, outputting the name and value into a string.

Browsers differ on the order in which they return attributes in the attributes object.

The order in which the attributes appear in the HTML or XML code may not necessarily be the order in which they appear in the attributes object
