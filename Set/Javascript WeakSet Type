ECMAScript 6 WeakSet is a new collection type that introduces set behavior into the language.

WeakSet type API is a strict subset of Set.

The "weak" designation describes how JavaScript's garbage collector treats values in a weak set.

An empty WeakSet instance is instantiated with the new keyword:

Copy
const ws = new WeakSet();
Values in a WeakSet can only be of type or inherit from Object-all other attempts to set a value with a non-object will throw a TypeError.

If you wish to populate the WeakSet when it is initialized, the constructor optionally accepts an iterable object, expecting it to contain valid values.

Each value in the iterable argument will be inserted into the newly created WeakSet in the order in which they are iterated:

Copy
const val1 = {id: 1},
      val2 = {id: 2},
      val3 = {id: 3};
// Initialize WeakSet with nested arrays
const ws1 = new WeakSet([val1, val2, val3]);

console.log(ws1.has(val1));  // true
console.log(ws1.has(val2));  // true
console.log(ws1.has(val3));  // true
Initialization is all-or-nothing, a single bad value will throw an error and abort the initialization

Copy
const val1 = {id: 1},
      val2 = {id: 2},
      val3 = {id: 3};
const ws2 = new WeakSet([val1, "BADVAL", val3]);
// TypeError: Invalid value used in WeakSet
typeof ws2;
// ReferenceError: ws2 is not defined

// Primitives can still be used with an object wrapper
const stringVal = new String("val1");
const ws3 = new WeakSet([stringVal]);
console.log(ws3.has(stringVal));  // true
Values can be added after initialization with add(), queried with has(), and removed with delete():

Copy
const ws = new WeakSet();

const val1 = {id: 1},
      val2 = {id: 2};

console.log(ws.has(val1));  // false

ws.add(val1)
  .add(val2);

console.log(ws.has(val1));  // true
console.log(ws.has(val2));  // true

ws.delete(val1);  // deletes only this value

console.log(ws.has(val1));  // false
console.log(ws.has(val2));  // true
The add() method returns the WeakSet instance, so it is possible to chain multiple add operations together, including on the initial declaration:

Copy
const val1 = {id: 1},
      val2 = {id: 2},
      val3 = {id: 3};

const ws = new WeakSet().add(val1);

ws.add(val2)
  .add(val3);

console.log(ws.has(val1));  // true
console.log(ws.has(val2));  // true
console.log(ws.has(val3));  // true
