The following code extends Javascript Set to support set operations on Set.

It supports the following operations:

Union
Intersect
Difference
Symmetric Difference
Cartesian Product
Copy
class XSet extends Set {
  union(...sets) {//from   www .  d  emo 2s . c o m
    return XSet.union(this, ...sets)
  }
   intersection(...sets) {
     return XSet.intersection(this, ...sets);
   }

   difference(set) {
     return XSet.difference(this, set);
   }

   symmetricDifference(set) {
     return XSet.symmetricDifference(this, set);
   }

   cartesianProduct(set) {
     return XSet.cartesianProduct(this, set);
   }

   powerSet() {
     return XSet.powerSet(this);
   }

   // Returns union of two or more sets.
   static union(a, ...bSets) {
     const unionSet = new XSet(a);
     for (const b of bSets) {
       for (const bValue of b) {
         unionSet.add(bValue);
       }
     }
     return unionSet;
   }

   // Returns intersection of two or more sets.
   static intersection(a, ...bSets) {
     const intersectionSet = new XSet(a);
     for (const aValue of intersectionSet) {
       for (const b of bSets) {
         if (!b.has(aValue)) {
           intersectionSet.delete(aValue);
         }
       }
     }
     return intersectionSet;
   }

   // Returns difference of exactly two sets.
   static difference(a, b) {
     const differenceSet = new XSet(a);
     for (const bValue of b) {
       if (a.has(bValue)) {
         differenceSet.delete(bValue);
       }
     }
     return differenceSet;
   }
  // Returns symmetric difference of exactly two sets.
  static symmetricDifference(a, b) {
    // By definition, the symmetric difference can be expressed as
    // (a union b) - (a intersection b)
    return a.union(b).difference(a.intersection(b));
  }

  // Returns cartesian product (as array pairs) of exactly two sets.
  // Must return set of arrays since cartesian product may contain
  // pairs of identical values.
  static cartesianProduct(a, b) {
    const cartesianProductSet = new XSet();
    for (const aValue of a) {
      for (const bValue of b) {
        cartesianProductSet.add([aValue, bValue]);
      }
    }
    return cartesianProductSet;
  }

  // Returns power set of exactly one set.
  static powerSet(a) {
    const powerSet = new XSet().add(new XSet());
    for (const aValue of a) {
      for (const set of new XSet(powerSet)) {
        powerSet.add(new XSet(set).add(aValue));
      }
    }
    return powerSet;
  }
}
