This section presents a quick introduction, through code examples, to the JavaScript language.

Anything following double slashes is an English-language comment.

They explain the JavaScript code.

Variable
A variable is a symbolic name for a value.

Variables are declared with the let keyword:

Copy
let x;        // Declare a variable named x.
Values can be assigned to variables with an = sign x = 0; // Now the variable x has the value 0 x // => 0: A variable evaluates to its value.

Data Types
JavaScript supports several types of values

Copy
x = 1;               // Numbers.
x = 0.01;            // Numbers can be integers or reals.
x = "hello world";   // Strings of text in quotation marks.
x =  'JavaScript';   // Single quote marks also delimit strings.
x = true;            // A Boolean value.
x = false;           // The other Boolean value.
x = null;            // Null is a special value that means "no value."
x = undefined;       // Undefined is another special value like null.
Object
JavaScript also have objects and arrays.

JavaScript's most important datatype is the object.

An object is a collection of name/value pairs, or a string to value map.

Copy
let book = {               // Objects are enclosed in curly braces.
    topic: "JavaScript",   // The property "topic" has value "JavaScript."
    edition: 7             // The property "edition" has value 7
};                         // The curly brace marks the end of the object.
Access the properties of an object with . or []:

Copy
book.topic            // => "JavaScript"
book["edition"]       // => 7: another way to access property values.
book.author = "CSS";  // Create new properties by assignment.
book.contents = {};   // {} is an empty object with no properties.
book.contents?.c?.s // => undefined: book.contents has no c property.

JavaScript also supports arrays of values:

Copy
let myArray = [2, 3, 5, 7]; // An array of 4 values, delimited with [ and ].
myArray[0]                  // => 2: the first element (index 0) of the array.
myArray.length              // => 4: how many elements in the array.
myArray[myArray.length-1]   // => 7: the last element of the array.
myArray[4] = 9;             // Add a new element by assignment.
myArray[4] = 11;            // Or alter an existing element by assignment.
let empty = [];             // [] is an empty array with no elements.
empty.length                // => 0
Arrays and objects can hold other arrays and objects:

Copy
let points = [             // An array with 2 elements.
    {x: 0, y: 0},          // Each element is an object.
    {x: 1, y: 1}
];
let data = {                 // An object with 2 properties
    trial1: [[1,2], [3,4]],  // The value of each property is an array.
    trial2: [[2,3], [4,5]]   // The elements of the arrays are arrays.
};
Operators
To form expressions in JavaScript, use operators:

Operators act on values to produce a new value.

Arithmetic operators are simple:

Copy
3 + 2        // => 5: addition
3 - 2        // => 1: subtraction
3 * 2        // => 6: multiplication
3 / 2        // => 1.5: division
"3" + "2"    // => "32": + adds numbers and concatenates strings
JavaScript defines some shorthand arithmetic operators

Copy
let count = 0;    // Define a variable
count++;          // Increment the variable
count--;          // Decrement the variable
count += 2;       // Add 2: same as count = count + 2;
count *= 3;       // Multiply by 3: same as count = count * 3;
count             // => 6: variable names are expressions, too.
Equality and relational operators test whether two values are equal, unequal, less than, greater than, and so on.

They evaluate to true or false.

Copy
let x = 2, y = 3;     // These = signs are assignment, not equality tests
x === y               // => false: equality
x  !== y              // => true: inequality
x < y                 // => true: less-than
x <= y                // => true: less-than or equal
x > y                 // => false: greater-than
x >= y                // => false: greater-than or equal
"two" === "three"     // => false: the two strings are different
"two" > "three"       // => true: "tw" is alphabetically greater than "th"
false === (x > y)     // => true: false is equal to false
Logical operators combine or invert boolean values

Copy
(x === 2) && (y === 3) // => true: both comparisons are true. && is AND
(x > 3)  || (y < 3)    // => false: neither comparison is true. || is OR
!(x === y)             // => true: ! inverts a boolean value
Function
A function is a named and parameterized block of JavaScript code.

You can define them once, and then invoke them many times.

Functions are parameterized blocks of JavaScript code that we can invoke.

Copy
function myFunc(x) {// Define a function named "myFunc" with parameter "x"
    return x + 1;  // Return a value one larger than the value passed in
}                  // Functions are enclosed in curly braces

myFunc(y)           // => 4: y is 3, so this invocation returns 3+1

let square = function(x) { // Functions are values and can be assigned to vars
    return x * x;          // Compute the function's value
};                         // Semicolon marks the end of the assignment.

square(myFunc(y))           // => 16: invoke two functions in one expression
We can use => to separate the argument list from the function body, and functions defined this way are known as arrow functions.

Arrow functions are most commonly used when you want to pass an unnamed function as an argument to another function.

The preceding code looks like this when rewritten to use arrow functions:

Copy
const myFunc = x => x + 1;   // The input x maps to the output x + 1
const square = x => x * x;  // The input x maps to the output x * x
myFunc(y)                    // => 4: function invocation is the same
square(myFunc(y))            // => 16
When we use functions with objects, we get methods:

When functions are assigned to the properties of an object, we call them "methods."

All JavaScript objects including arrays have methods:

Copy
let a = [];         // Create an empty array
a.push(1,2,3);      // The push() method adds elements to an array
a.reverse();        // reverse the order of elements
We can define our own methods.

The "this" keyword refers to the object on which the method is defined.

The points array from earlier.

Copy
points.dist = function() { // Define a method to compute distance between points
    let p1 = this[0];      // First element of array we're invoked on
    let p2 = this[1];      // Second element of the "this" object
    let a = p2.x-p1.x;     // Difference in x coordinates
    let b = p2.y-p1.y;     // Difference in y coordinates
    return Math.sqrt(a*a + // The Pythagorean theorem
                     b*b); // Math.sqrt() computes the square root
};
points.dist()              // => Math.sqrt(2): distance between our 2 points
Statement
JavaScript statements include conditionals and loops using the syntax of C, C++, Java, and other languages.

if statement

Copy
function abs(x) {          // compute the absolute value.
    if (x >= 0) {          // if statement
        return x;          // executes this code if the comparison is true.
    }                      // This is the end of the if clause.
    else {                 // The optional else clause executes its code if
        return -x;         // the comparison is false.
    }                      // Curly braces optional when 1 statement per clause.
}                          // Note return statements nested inside if/else.
abs(-10) === abs(10)       // => true
for of loop

Copy
function sum(array) {      // sum elements of an array
    let sum = 0;           // Start with an initial sum of 0.
    for(let x of array) {  // Loop over array, assigning each element to x.
        sum += x;          // Add the element value to the sum.
    }                      // This is the end of the loop.
    return sum;            // Return the sum.
}
while loop

Copy
function factorial(n) {    // A function to compute factorials
    let product = 1;       // Start with a product of 1
    while(n > 1) {         // Repeat statements in {} while expr in () is true
        product *= n;      // Shortcut for product = product * n;
        n--;               // Shortcut for n = n - 1
    }                      // End of loop
    return product;        // Return the product
}
for loop

Copy
function factorial2(n) {   // Another version using a different loop
    let i, product = 1;    // Start with 1
    for(i=2; i <= n; i++)  // Automatically increment i from 2 up to n
        product *= i;      // Do this each time. {} not needed for 1-line loops
    return product;        // Return the factorial
}
Class
JavaScript supports an object-oriented programming style.

The following code shows how to define a JavaScript class to represent 2D geometric points.

Objects that are instances of this class have a single method, named distance(), that computes the distance of the point from the origin:

Copy
class Point {              // class names are capitalized.
    constructor(x, y) {    // Constructor function to initialize new instances.
        this.x = x;        // this refers to the new object being initialized.
        this.y = y;        // store function arguments as object properties.
    }                      // no return for constructor functions.

    distance() {           // Method to compute distance from origin to point.
        return Math.sqrt(  // Return the square root of x square + y square.
            this.x * this.x +  // this refers to the Point object on which
            this.y * this.y    // the distance method is invoked.
        );
    }
}

// Use the Point() constructor function with "new" to create Point objects
let p = new Point(1, 1);   // The geometric point (1,1).

// Now use a method of the Point object p
console.log(p.distance());
